//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DALUsers
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UsersDBEntities2 : DbContext
    {
        public UsersDBEntities2()
            : base("name=UsersDBEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__RefactorLog> C__RefactorLog { get; set; }
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Seller> Sellers { get; set; }
    
        public virtual int AddAdmin(string name, string login, string password, Nullable<int> roles_ID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roles_IDParameter = roles_ID.HasValue ?
                new ObjectParameter("Roles_ID", roles_ID) :
                new ObjectParameter("Roles_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAdmin", nameParameter, loginParameter, passwordParameter, roles_IDParameter);
        }
    
        public virtual int AddCustomer(string name, string surname, string email, string login, string password, Nullable<int> roles_ID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roles_IDParameter = roles_ID.HasValue ?
                new ObjectParameter("Roles_ID", roles_ID) :
                new ObjectParameter("Roles_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomer", nameParameter, surnameParameter, emailParameter, loginParameter, passwordParameter, roles_IDParameter);
        }
    
        public virtual int AddSeller(string name, string address, Nullable<long> cellPhone, string login, string password, Nullable<int> roles_ID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cellPhoneParameter = cellPhone.HasValue ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(long));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roles_IDParameter = roles_ID.HasValue ?
                new ObjectParameter("Roles_ID", roles_ID) :
                new ObjectParameter("Roles_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSeller", nameParameter, addressParameter, cellPhoneParameter, loginParameter, passwordParameter, roles_IDParameter);
        }
    
        public virtual int DeleteAdmin(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAdmin", idParameter);
        }
    
        public virtual int DeleteSeller(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSeller", iDParameter);
        }
    
        public virtual ObjectResult<GetCustomers_Result> GetCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomers_Result>("GetCustomers");
        }
    
        public virtual ObjectResult<GetSellerByID_Result> GetSellerByID(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSellerByID_Result>("GetSellerByID", idParameter);
        }
    
        public virtual ObjectResult<GetSellers_Result> GetSellers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSellers_Result>("GetSellers");
        }
    
        public virtual int RateSeller(Nullable<int> id, Nullable<decimal> rate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RateSeller", idParameter, rateParameter);
        }
    
        public virtual int UpdateSeller(string name, string address, Nullable<long> cellPhone, string login, string password)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cellPhoneParameter = cellPhone.HasValue ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(long));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSeller", nameParameter, addressParameter, cellPhoneParameter, loginParameter, passwordParameter);
        }
    }
}
